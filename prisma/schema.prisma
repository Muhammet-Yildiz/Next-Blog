generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  username             String?
  name                 String?
  email                String?        @unique
  image                String?
  emailVerified        DateTime?
  hashedPassword       String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  accounts             Account[]
  posts                Post[]
  info                 String?
  followers            User[]         @relation("UserFollows", fields: [followersIDs], references: [id])
  followersIDs         String[]       @db.ObjectId
  following            User[]         @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs         String[]       @db.ObjectId
  savedPosts           String[]       @db.ObjectId
  likedPosts           String[]       @db.ObjectId
  comments             Comment[]
  notifications        Notification[]
  actionsPerformed     Notification[] @relation("UserActions")
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  content        String
  published      Boolean        @default(false)
  author         User?          @relation(fields: [authorId], references: [id])
  authorId       String?        @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  image          String?
  likesCount     Int            @default(0)
  readingTime    Int            @default(0)
  relatedTags    String[]
  currentTagName String?
  comments       Comment[]
  notifications  Notification[]
  viewCount      Int            @default(0)
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
  actionBy   User?    @relation("UserActions", fields: [actionById], references: [id])
  actionById String?  @db.ObjectId
  type       String
  postId     String?  @db.ObjectId
  post       Post?    @relation(fields: [postId], references: [id])
  isRead     Boolean  @default(false)
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?  @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  likesCount Int      @default(0)
  likedBy    String[] @db.ObjectId
}